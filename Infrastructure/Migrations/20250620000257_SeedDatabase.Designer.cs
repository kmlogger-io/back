// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(KmloggerDbContext))]
    [Migration("20250620000257_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Environment")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Environment");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Active")
                        .HasDatabaseName("IX_Apps_Active");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Apps_CategoryId");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Apps_CreatedDate");

                    b.ToTable("Apps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Active")
                        .HasDatabaseName("IX_Categories_Active");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Categories_CreatedDate");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LogApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uuid")
                        .HasColumnName("AppId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Environment");

                    b.Property<string>("Level")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Level");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("AppId")
                        .HasDatabaseName("IX_Logs_AppId");

                    b.HasIndex("Environment")
                        .HasDatabaseName("IX_Logs_Environment");

                    b.HasIndex("Level")
                        .HasDatabaseName("IX_Logs_Level");

                    b.HasIndex("CreatedDate", "Level")
                        .HasDatabaseName("IX_Logs_CreatedDate_Level");

                    b.HasIndex("AppId", "CreatedDate", "Level")
                        .HasDatabaseName("IX_Logs_AppId_CreatedDate_Level");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("Ativo");

                    b.Property<string>("AwsKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("AwsKey");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UrlExpired")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UrlExpired");

                    b.Property<string>("UrlTemp")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UrlTemp");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Pictures_Ativo");

                    b.HasIndex("AwsKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Pictures_AwsKey_Unique");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Pictures_CreatedDate");

                    b.HasIndex("UrlExpired")
                        .HasDatabaseName("IX_Pictures_UrlExpired");

                    b.HasIndex("UrlExpired", "Ativo")
                        .HasDatabaseName("IX_Pictures_UrlExpired_Ativo");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Slug");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Roles_CreatedDate");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Slug_Unique");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("varchar")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("RefreshTokenExpiryTime");

                    b.Property<Guid?>("TokenActivate")
                        .HasColumnType("uuid")
                        .HasColumnName("TokenActivate");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Active")
                        .HasDatabaseName("IX_Users_Active");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Users_CreatedDate");

                    b.HasIndex("TokenActivate")
                        .HasDatabaseName("IX_Users_TokenActivate");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("UsersId", "RolesId");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("IX_UserRole_RolesId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Domain.Entities.App", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Apps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("AppId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("AppId");

                            b1.ToTable("Apps");

                            b1.WithOwner()
                                .HasForeignKey("AppId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("CategoryName");

                            b1.HasKey("CategoryId");

                            b1.HasIndex("Name")
                                .IsUnique()
                                .HasDatabaseName("IX_Categories_Name_Unique");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.LogApp", b =>
                {
                    b.HasOne("Domain.Entities.App", "App")
                        .WithMany("Logs")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Description", "Message", b1 =>
                        {
                            b1.Property<Guid>("LogAppId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .HasColumnType("text")
                                .HasColumnName("Message");

                            b1.HasKey("LogAppId");

                            b1.ToTable("Logs");

                            b1.WithOwner()
                                .HasForeignKey("LogAppId");
                        });

                    b.OwnsOne("Domain.ValueObjects.StackTrace", "StackTrace", b1 =>
                        {
                            b1.Property<Guid>("LogAppId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .HasColumnType("text")
                                .HasColumnName("StackTrace");

                            b1.HasKey("LogAppId");

                            b1.ToTable("Logs");

                            b1.WithOwner()
                                .HasForeignKey("LogAppId");
                        });

                    b.Navigation("App");

                    b.Navigation("Message");

                    b.Navigation("StackTrace");
                });

            modelBuilder.Entity("Domain.Entities.Picture", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PictureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("PictureId");

                            b1.ToTable("Pictures");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("RoleName");

                            b1.HasKey("RoleId");

                            b1.HasIndex("Name")
                                .IsUnique()
                                .HasDatabaseName("IX_Roles_Name_Unique");

                            b1.ToTable("Roles");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Complement")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("AddressComplement");

                            b1.Property<string>("NeighBordHood")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("AddressNeighborHood");

                            b1.Property<long?>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("AddressNumber");

                            b1.Property<string>("Road")
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasColumnName("AddressRoad");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("varchar(254)")
                                .HasColumnName("EmailAddress");

                            b1.HasKey("UserId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email_Active")
                                .HasFilter("\"Active\" = true");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.HasIndex("FirstName", "LastName")
                                .HasDatabaseName("IX_Users_FullName");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("Salt")
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.App", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Apps");
                });
#pragma warning restore 612, 618
        }
    }
}
